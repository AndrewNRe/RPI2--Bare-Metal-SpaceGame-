A: Change the code to follow my current code style.
-Change all structs to be lowercase
-Change all function names to be uppercase.
-Reduce code duplication.
-Get rid of all globals except maybe memory dependent on what you want to do there. It's in the game code layer, so the way you do memory will be the same on all 
platforms in this case. As such, I think doing something more robust, or requiring that you have a memory structure per allocation would be best.

B: "multithread" the software renderer.
-Need to ensure that I can use the other 3 cores.
-Need a way to break the framebuffer up into chunks.
-What are the boundary lines for how large a chunk can be? I don't want one thread to write to the framebuffer and cause some cpu cache flush or what not.
-Is the previous statement relevant? Absolutely need to read on this.
-Need to get some queue to issue out work to all the threads. Thinking that a lot of rework on the engine will be done to make this happen!

C: Correct GJK to be more correct.
-Refer to Haunt code if this is me doing this implement.
-If someone else is doing this, the video I used to understand GJK was Casey Muratori's video: https://www.youtube.com/watch?v=Qupqu1xe7Io

F: Should go and reduce register count on render letters. I was just simply tired and lazy the day I originally wrote it and don't have time today (4/12/21)!

4/30/21 -
-Need to now clip invalid vertexes against the valid vertex that is inside that could be drawn!
-Also need to remove clockwise triangles since they won't be drawn by the software routine iirc!
Also, if the asm routine is drawing clockwise, swap it to counter clockwise at some point! I'm pretty sure it is CCW though.


Step 0 - figure out where to clip and generate more vertex data.
So you'll have 3 -> N vertex sized array before next step.
Step 1 - Wind counter clockwise and figure out where each vertex goes. There appears to be constants in terms of how much each vertex should be reused, IE the index
buffer when pushing one triangle and figuring out where each vertex goes!
Step 2 - you'll be all good to draw! So just send those triangles to the scanline sort and it'll all work out to some degree!