A: Change the code to follow my current code style.
-Change all structs to be lowercase
-Change all function names to be uppercase.
-Reduce code duplication.
-Get rid of all globals except maybe memory dependent on what you want to do there. It's in the game code layer, so the way you do memory will be the same on all 
platforms in this case. As such, I think doing something more robust, or requiring that you have a memory structure per allocation would be best.

B: "multithread" the software renderer.
-Need to ensure that I can use the other 3 cores.
-Need a way to break the framebuffer up into chunks.
-What are the boundary lines for how large a chunk can be? I don't want one thread to write to the framebuffer and cause some cpu cache flush or what not.
-Is the previous statement relevant? Absolutely need to read on this.
-Need to get some queue to issue out work to all the threads. Thinking that a lot of rework on the engine will be done to make this happen!

C: Correct GJK to be more correct.
-Refer to Haunt code if this is me doing this implement.
-If someone else is doing this, the video I used to understand GJK was Casey Muratori's video: https://www.youtube.com/watch?v=Qupqu1xe7Io

F: Should go and reduce register count on render letters. I was just simply tired and lazy the day I originally wrote it and don't have time today (4/12/21)!

4/21/21 -

Ok so here's what i've found out now.
The renderer just needs to do the clipping 100% and proper. The clipping only has to be done on the triangle as you're technically 2d at this point. The Z coordinate
has absolutely no relevance after you pass being within the near and far clip plane of Z.
Furthermore, that Z test is only for sorting / passing the inital, "if between near and far" test. 
The Z value is just converted from the -z (because right handed coordinate system) to a positive Z once you do the projection matrix (do the math to see this).
So overall, Z just becomes irrelevant after you do the inital projection matrix math as far as I can tell.

TODO Clipping. Just try the Sutherlandâ€“Hodgman algorithm on this!
After, it should all just work tbh.
Also, need to swap the z's value on the w row to -1 and fix the render since it's mirror otherwise as far as I can tell. Does this have something to do with the fact
that the actual pixel fill, fills clockwise instead of counter clockwise???? I don't know how that'd be that relevant here, but I need to investigate that.
