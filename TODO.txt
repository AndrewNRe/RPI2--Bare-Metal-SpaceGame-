A: Change the code to follow my current code style.
-Change all structs to be lowercase
-Change all function names to be uppercase.
-Reduce code duplication.
-Get rid of all globals except maybe memory dependent on what you want to do there. It's in the game code layer, so the way you do memory will be the same on all 
platforms in this case. As such, I think doing something more robust, or requiring that you have a memory structure per allocation would be best.

B: "multithread" the software renderer.
-Need to ensure that I can use the other 3 cores.
-Need a way to break the framebuffer up into chunks.
-What are the boundary lines for how large a chunk can be? I don't want one thread to write to the framebuffer and cause some cpu cache flush or what not.
-Is the previous statement relevant? Absolutely need to read on this.
-Need to get some queue to issue out work to all the threads. Thinking that a lot of rework on the engine will be done to make this happen!

C: Correct GJK to be more correct.
-Refer to Haunt code if this is me doing this implement.
-If someone else is doing this, the video I used to understand GJK was Casey Muratori's video: https://www.youtube.com/watch?v=Qupqu1xe7Io

D: Fix the math of either the perspective projection matrix, and also just the general space math as I know it's gotta be wrong due to rotations rotating about the 
world origin from what it looks like atm.

E: Don't store full sets of vertex / index data for N temple platforms. You should just store a position and only one instance of the mesh! //As of 3/27/21, 
//this is partially done. Still have a bit to go on it though. Mostly just have to rework the entire platform render / player system so game code and such.


Currently working on 3/31/21:
Understand why the test triangle isn't being rendered and how to solve it!

-The RenderLetterArray routine does not end if there's a null termination character in the string. Is this ok? I mean, it's faster for it to not check for null term. But, in
terms of what people expect, this is not very good. But, letting people write their own print routine that does this might be better? I am unsure. Would love input on this
from whoever!

-Make the RenderLetterArray routien return the number of X values moved forward. That or, actually just give pointers to x and y lines and increment them internally.
just use the constant start offsets set in the RPI2 code and set those in the asm code! So basically, just understand how the routine works since I didn't do that today.
Once understood, do the rewrite to null terminate on 0, and also just modify the X and Y lines with constant values since this is monospaced text and you're on a locked
display size anyways.